#!/usr/bin/ruby
require 'optparse'
require 'date'

module Prune
  VERSION = [1,0,0]
  
  class CommandLineInterface
    def self.parse_and_run
      options = { :verbose => false, :did_work => false }
      parser = OptionParser.new do |opts|
          opts.banner = "Usage: prune [options] folder"
          opts.on( "-v", "--verbose", "Prints much more frequently during execution about what it's doing." ) { options[:verbose] = true }
          opts.on_tail( "--version", "Displays version information." ) do 
            options[:did_work] = true
            puts "Prune #{VERSION.join('.')}, by Geoffrey Wiseman."
          end
          opts.on_tail( "-?", "--help", "Shows quick help about using prune." ) do
            options[:did_work] = true
            puts opts
          end
      end

      begin
        parser.parse!
      rescue OptionParser::ParseError
        $stderr.print "Error: " + $! + "\n"
        exit
      end
      
      if ARGV.size != 1 then
        print parser.help unless options[:did_work]
      else
        Pruner.new( options ).prune( ARGV.first )
      end
    end
  end
  
  class Pruner
    
    def initialize( options )
      @options = options
    end
    
    def prune( folder_name )
      return puts "ERROR: Cannot find folder: #{folder_name}" unless File.exists? folder_name
      return puts "ERROR: #{folder_name} is not a folder" unless File.directory? folder_name
      puts "Analyzing '#{folder_name}':"
    
      policy = RetentionPolicy.new folder_name, Dir.entries(folder_name), @options
    
      print "\tRemoving:\n\t\t#{policy.removing.join("\n\t\t")}\n\n" unless policy.removing.empty?
      print "\tArchiving:\n\t\t#{policy.archiving.join("\n\t\t")}\n\n" unless policy.archiving.empty?
      print "\tRetaining:\n\t\t#{policy.retaining.join("\n\t\t")}\n\n" unless policy.retaining.empty?
    
      print "\t#{policy.analyzed_count} file(s) analyzed\n"
    end
  end

  class RetentionPolicy
    attr_reader :analyzed_count, :removing, :archiving, :retaining
  
    def initialize( folder_name, children, options )
      @removing = []
      @archiving = []
      @retaining = []
      @analyzed_count = 0
      @options = options

      children.each { |child| analyze File.join( folder_name, child ) }
      puts "" if @options[:verbose]
    end
  
    def analyze( file_name )
      return if File.directory? file_name
    
      created = Date.parse(File.ctime(file_name).strftime('%Y/%m/%d'))
      today = Date.today
    
      if today - created < 14 then
        # less than 14 days old, keep it
        @retaining << file_name
        puts "\t#{file_name} < 14 days old: retain" if @options[:verbose]
      elsif today.year == created.year && ( today.month - created.month ) == 0 then
        # same month, last month
        ( created.wday == 5 ? @retaining : @removing ) << file_name
        puts "\t#{file_name} last two months: keeping fridays (#{created.wday == 5 ? 'retain' : 'remove' })" if @options[:verbose]
      else 
        # earlier month
        @archiving << file_name
        puts "\t#{file_name} older than two months: archive" if @options[:verbose]
      end
    
      @analyzed_count += 1
    end
  
  end
end

Prune::CommandLineInterface.parse_and_run
